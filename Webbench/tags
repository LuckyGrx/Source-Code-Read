!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
METHOD_GET	webbench.c	38;"	d	file:
METHOD_HEAD	webbench.c	39;"	d	file:
METHOD_OPTIONS	webbench.c	40;"	d	file:
METHOD_TRACE	webbench.c	41;"	d	file:
PROGRAM_VERSION	webbench.c	42;"	d	file:
REQUEST_SIZE	webbench.c	53;"	d	file:
Socket	socket.c	/^int Socket(const char *host, int clientPort) {$/;"	f
alarm_handler	webbench.c	/^static void alarm_handler(int signal) {$/;"	f	file:
bench	webbench.c	/^static int bench(void) {$/;"	f	file:
benchcore	webbench.c	/^void benchcore(const char *host, const int port, const char *req) {$/;"	f
benchtime	webbench.c	/^int benchtime = 30;            \/\/ 压测时间,默认为30秒,通过-t参数设置$/;"	v
build_request	webbench.c	/^void build_request(const char *url) {$/;"	f
bytes	webbench.c	/^int bytes = 0;                 \/\/ 记录进程成功读取的字节数$/;"	v
clients	webbench.c	/^int clients = 1;               \/\/ 并发数目,默认只有一个进程发请求,通过-c参数设置$/;"	v
failed	webbench.c	/^int failed = 0;                \/\/ 记录进程没有得到服务器响应的数量$/;"	v
force	webbench.c	/^int force = 0;                 \/\/ $/;"	v
force_reload	webbench.c	/^int force_reload = 0;          \/\/$/;"	v
host	webbench.c	/^char host[MAXHOSTNAMELEN];     \/\/ 服务端ip$/;"	v
http10	webbench.c	/^int http10 = 1;                \/\/ HTTP版本, 0表示HTTP0.9, 1表示HTTP1.0, 2表示HTTP1.1$/;"	v
long_options	webbench.c	/^static const struct option long_options[] = {$/;"	v	typeref:struct:option	file:
main	webbench.c	/^int main(int argc, char *argv[]) {$/;"	f
method	webbench.c	/^int method = METHOD_GET;       \/\/ 默认请求方式为GET,也支持HEAD, OPTIONS, TRACE$/;"	v
mypipe	webbench.c	/^int mypipe[2];                 \/\/ 使用管道进行父进程和子进程之间的通信$/;"	v
proxyhost	webbench.c	/^char *proxyhost = NULL;        \/\/ $/;"	v
proxyport	webbench.c	/^int proxyport = 80;            \/\/ 代理服务器的端口(HTTP服务器的端口为80)$/;"	v
request	webbench.c	/^char request[REQUEST_SIZE];    \/\/ 所要发送的HTTP请求$/;"	v
speed	webbench.c	/^int speed = 0;                 \/\/ 记录进程成功得到服务器响应的数量$/;"	v
timerexpired	webbench.c	/^volatile int timerexpired = 0; \/\/ 判断压测时长是否已经到达设定的时间,1表示压测时间到$/;"	v
usage	webbench.c	/^static void usage(void) {$/;"	f	file:
